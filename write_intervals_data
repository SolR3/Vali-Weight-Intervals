#!/usr/bin/env python3

# standard imports
import argparse
import json
import multiprocessing
import numpy
import os
import sys
import tempfile
import time


TEMPDIR = "write_interval_data_"
LOCAL_TIMEZONE = "MST7MDT"
TIMESTAMP_FILE_NAME = "timestamp.json"


def _parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-j", "--json-folder",
        required=True,
        help="The json folder in which to write the json files."
    )

    parser.add_argument(
        "-n", "--num-weights-intervals",
        type=int,
        help="The number of weight setting intervals to print out."
    )

    procs_or_chunks = parser.add_mutually_exclusive_group()

    procs_or_chunks.add_argument(
        "-p", "--processes",
        type=int,
        default=0,
        help="The number of processes used to write the json files."
    )

    procs_or_chunks.add_argument(
        "-c", "--chunks",
        type=int,
        default=0,
        help="The number of chunks in which to gather the data and write "
             "the json files. This is only valid when not multi-processing."
    )

    parser.add_argument(
        "-i", "--interval",
        type=float,
        default=0,
        help="The number of minutes between validator data gathering. If 0 or not "
             "specified then the data is gathered only once."
    )
    
    parser.add_argument(
        "-l", "--local-subtensor",
        help="Use the specified local subtensor (i.e. subtensor-lite-archive). "
             "When not specified, use the 'archive' network subtensor."
    )

    return parser.parse_args()


def format_time(total_time):
    m = total_time/60
    minutes = int(m)
    seconds = round((m - minutes)*60)

    runtime_text = [f"{minutes} minutes"] if minutes else []
    if seconds:
        runtime_text += [f"{seconds} seconds"]
    runtime_text = ", ".join(runtime_text)

    return runtime_text


def write_json_files(
    all_subnets, network, num_weights_intervals,
    read_json_folder, write_json_folder,
    netuid_start=None, netuid_end=None, sleep_time=0,
):
    if sleep_time:
        time.sleep(sleep_time)

    print("Gathering subnet data.")
    start_time = time.time()

    if netuid_start is not None:
        if netuid_end is not None:
            netuids = all_subnets[netuid_start:netuid_end+1]
        else:
            netuids = all_subnets[netuid_start:]
    else:
        netuids = all_subnets[1:]

    existing_json_data = subnet_data.SubnetDataFromJson(
        netuids, read_json_folder, verbose=True
    ).validator_data

    new_data_dict = subnet_data.SubnetData(
        netuids,
        num_weights_intervals,
        network,
        existing_data=existing_json_data,
        verbose=True
    ).to_dict()

    for netuid in netuids:
        json_file_name = subnet_data.SubnetDataFromJson.get_json_file_name(netuid)
        write_json_file = os.path.join(write_json_folder, json_file_name)
        print(f"\nWriting data to file: {write_json_file}")
        with open(write_json_file, "w") as fd:
            json.dump({netuid: new_data_dict[netuid]}, fd, indent=4)

    total_time = time.time() - start_time
    print(
        f"\nSubnet data gathering took {format_time(round(total_time))} "
        f"for subnets {netuids}.\n"
    )


def write_timestamp(json_folder):
    os.environ["TZ"] = LOCAL_TIMEZONE
    time.tzset()

    max_file_time = 0
    json_base, json_ext = os.path.splitext(
        subnet_data.SubnetDataFromJson.json_file_name
    )
    for _file in os.listdir(json_folder):
        file_base, file_ext = os.path.splitext(_file)
        if not file_base.startswith(json_base) or file_ext != json_ext:
            continue

        json_file = os.path.join(json_folder, _file)
        file_time = os.path.getmtime(json_file)
        if file_time > max_file_time:
            max_file_time = file_time
    
    timestamp = time.ctime(max_file_time)
    timestamp_file = os.path.join(json_folder, TIMESTAMP_FILE_NAME)
    print(f"\nWriting timestamp file: {timestamp_file}")
    with open(timestamp_file, "w") as fd:
            json.dump(timestamp, fd)


def get_chunk_args(
    all_subnets, network, num_weights_intervals,
    read_json_folder, write_json_folder, num_chunks
):
    num_subnets = len(all_subnets) - 1
    chunk_size = int(numpy.ceil(num_subnets / num_chunks))
    process_args = []
    netuid_start = 1
    sleep_time = 0
    while True:
        netuid_end = netuid_start + chunk_size - 1
        if netuid_end >= num_subnets:
            process_args.append(
                (all_subnets, network, num_weights_intervals,
                 read_json_folder, write_json_folder,
                 netuid_start, None, sleep_time)
            )
            break
        else:
            process_args.append(
                (all_subnets, network, num_weights_intervals,
                 read_json_folder, write_json_folder,
                 netuid_start, netuid_end, sleep_time)
            )
            netuid_start = netuid_end + 1
            sleep_time += 1

    return process_args


def main(options):
    os.makedirs(options.json_folder, exist_ok=True)

    network = (
        f"ws://subtensor-{options.local_subtensor}.rizzo.network:9944"
        if options.local_subtensor
        else "archive"
    )
    interval_seconds = round(options.interval * 60)

    while True:
        start_time = time.time()

        with bittensor.subtensor(network=network) as subtensor:
            all_subnets = subtensor.get_subnets()

        tempdir = tempfile.mkdtemp(prefix=TEMPDIR)

        num_chunks = options.processes or options.chunks
        if num_chunks:
            chunk_args = get_chunk_args(
                all_subnets, network, options.num_weights_intervals,
                options.json_folder, tempdir, num_chunks
            )

            if options.processes:
                with multiprocessing.Pool(processes=options.processes) as pool:
                    pool.starmap(write_json_files, chunk_args)
            else:  # options.chunks
                for chunk_arg_tuple in chunk_args:
                    write_json_files(*chunk_arg_tuple)

        else:
            write_json_files(
                all_subnets, network, options.num_weights_intervals,
                options.json_folder, tempdir
            )

        # Copy files over to relevant location
        for file_name in os.listdir(options.json_folder):
            if (
                file_name == TIMESTAMP_FILE_NAME
                or os.path.splitext(file_name)[1] != ".json"
            ):
                continue

            json_file = os.path.join(options.json_folder, file_name)
            json_file_bkup = json_file + ".bkup"
            print(f"Moving {json_file} to {json_file_bkup}")
            os.rename(json_file, json_file_bkup)

        for file_name in os.listdir(tempdir):
            src_json_file = os.path.join(tempdir, file_name)
            dest_json_file = os.path.join(options.json_folder, file_name)
            print(f"Moving {src_json_file} to {dest_json_file}")
            os.rename(src_json_file, dest_json_file)

        os.rmdir(tempdir)

        write_timestamp(options.json_folder)

        total_seconds = round(time.time() - start_time)
        print(
            "\nTotal subnet data gathering took "
            f"{format_time(round(total_seconds))}.\n"
        )

        # Only gather the data once.
        if not interval_seconds:
            break

        wait_seconds = interval_seconds - total_seconds
        if wait_seconds > 0:
            wait_time_formatted = format_time(wait_seconds)
            print(f"Waiting {wait_time_formatted}.")
            time.sleep(wait_seconds)
        else:
            print(
                f"Processing took {total_seconds} seconds which is longer "
                f"than {interval_seconds} seconds. Not waiting."
            )

if __name__ == "__main__":
    options = _parse_args()

    # bittensor import
    import bittensor

    # Import local subnet_data module
    sys.path = [os.path.join(os.path.dirname(__file__), "python")] + sys.path
    import subnet_data

    main(options)
