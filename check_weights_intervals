#!/usr/bin/env python3

# standard imports
import argparse
import json
import os
import sys
import time


TIMESTAMP_FILE_NAME = "timestamp.json"
DEFAULT_NUM_INTERVALS_JSON = 30
DEFAULT_NUM_INTERVALS_NO_JSON = 10

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-s", "--subnets",
        nargs="+",
        type=int,
        required=True,
        help="The subnet numbers."
    )

    parser.add_argument(
        "-n", "--num-intervals",
        type=int,
        help="The number of weight setting intervals "
             f"to print out. Default: {DEFAULT_NUM_INTERVALS_JSON} when a "
             f"json folder is specified, {DEFAULT_NUM_INTERVALS_NO_JSON} "
             "when no json folder is specified."
    )

    parser.add_argument(
        "-t", "--print-tables",
        action="store_true",
        help="When specified, each subnet is printed as a table. Otherwise"
             "when not specified, everything is printed as regular text."
    )
    
    parser.add_argument(
        "-j", "--json-folder",
        help="The json cache file from which to read the data. If this is not"
             "specified then the data is gathered directly from the subtensor."
    )

    parser.add_argument(
        "-l", "--local-subtensor",
        help="Use the specified local subtensor (i.e. subtensor-lite-archive). "
             "When not specified, use the 'archive' network subtensor."
    )

    return parser.parse_args()


def format_time(total_time):
    m = total_time/60
    minutes = int(m)
    seconds = round((m - minutes)*60)
    
    runtime_text = f"{minutes} minutes, " if minutes else ""
    runtime_text += f"{seconds} seconds"
    
    return runtime_text


def main(options):
    network = (
        f"ws://subtensor-{options.local_subtensor}.rizzo.network:9944"
        if options.local_subtensor
        else "archive"
    )

    timestamp_msg = None
    start_time = time.time()
    if options.json_folder:
        num_intervals = options.num_intervals or DEFAULT_NUM_INTERVALS_JSON
        validator_data = subnet_data.SubnetDataFromJson(
            options.subnets,
            options.json_folder,
            num_intervals=num_intervals,
            debug=True
        ).validator_data
        timestamp_file = os.path.join(options.json_folder, TIMESTAMP_FILE_NAME)
        if os.path.isfile(timestamp_file):
            with open(timestamp_file, "r") as fd:
                timestamp = json.load(fd)
                timestamp_msg = (
                    f"\033[92mLast update: {timestamp} (US Mountain Time)"
                )
        else:
            timestamp_msg = "\033[91mNO TIMESTAMP FILE!"
    else:
        num_intervals = options.num_intervals or DEFAULT_NUM_INTERVALS_NO_JSON
        validator_data = subnet_data.SubnetData(
            options.subnets,
            num_intervals,
            network=network,
            debug=True
        ).validator_data
    total_time = time.time() - start_time
    print(f"\nSubnet data gathering took {format_time(round(total_time))}.")

    subnet_printer.RichPrinter(
        netuids=options.subnets,
        validator_data=validator_data,
        print_tables=options.print_tables,
    )

    if timestamp_msg:
        print()
        print(timestamp_msg)
        print()


if __name__ == "__main__":
    options = parse_args()

    # Import local subnet_data module
    sys.path = [os.path.join(os.path.dirname(__file__), "python")] + sys.path
    import subnet_data
    import subnet_printer

    main(options)
